# noinspection GraphQLUnresolvedReference
# The root query of the application
scalar Date

directive @constraint(
    # String constraints
    minLength: Int
    maxLength: Int
    startsWith: String
    endsWith: String
    contains: String
    notContains: String
    pattern: String
    format: String
    # Number constraints
    min: Float
    max: Float
    exclusiveMin: Float
    exclusiveMax: Float
    multipleOf: Float
    uniqueTypeName: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type ActivitySector {
    id: ID!
    name: String!
}

type Application {
    id: ID!
    dateOfApplication: Date!
    applicantProfile: UserProfile!
    candidate: Candidate!
    jobListing: JobListing!
}

input ApplicationInput {
    userId: ID!
    applicantProfileId: ID!
    jobListingId: ID!
}

type Candidate {
    id: ID!
    user: User!
    applications: [Application]
}

enum ContractType {
    FULL_TIME,
    PART_TIME,
    INTERNSHIP,
    FREE_PROFESSIONAL,
    TEMPORARY_EMPLOYEE,
    PUPIL,
    SEASONAL
}

type City {
    id: ID!
    name: String!
    country: Country!
}

type Certification {
    id: ID!
    name: String!
}

input CertificationInput {
    name: String!
}

type Country {
    code: String!
    name: String!
    cities: [City]
}

type Domain {
    id: ID!
    name: String!
    studies: [Study]
}

input DomainInput {
    name: String!
}

type Institution {
    id: ID!
    name: String!
    description: String
    photography: String
    studies: [Study]
}

input InstitutionInput {
    name: String!
    description: String
    photography: String
}

type Experience {
    id: ID!
    title: String!
    contractType: ContractType!
    organization: Organization
    city: City
    startDate: Date!
    endDate: Date
    activitySector: ActivitySector!
    description: String!
    userProfile: UserProfile!
}

input ExperienceInput {
    id: ID
    title: String!
    contractType: ContractType!
    organizationId: ID!
    city: String
    startDate: Date!
    endDate: Date
    activitySectorId: ID!
    description: String!
    userProfileSlugUrl: String!
}

type JobCategory {
    id: ID!
    name: String!
}

input JobCategoryInput {
    name: String!
}

type Job {
    id: ID!
    name: String!
    description: String!
    jobListings: [JobListing]
}

input JobInput {
    name: String!
    description: String!
}

input JobListingInput {
    title: String! @constraint(minLength: 5)
    description: String! @constraint(maxLength: 2000)
    availableFrom: Date!
    availableTo: Date!
    location: String! @constraint(minLength: 3)
    jobId: ID! @constraint(minLength: 1)
    numberOfVacancies: Int! @constraint(minLength: 1)
    contractType: ContractType!
    organizationId: ID! @constraint(minLength: 1)
    categoryId: ID! @constraint(minLength: 1)
}

type JobListing {
    id: ID!
    title: String!
    description: String!
    availableFrom: Date!
    availableTo: Date!
    isActive: Boolean
    city: City!
    numberOfVacancies: Int!
    job: Job!
    contractType: ContractType!
    organization: Organization!
    category: JobCategory
    applications: [Application]
}

type JobListingPage {
    list: [JobListing],
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

type Organization {
    id: ID!
    name: String!
    industry: String!
    location: String!
    jobs: [JobListing]
    photography: String
}

enum Status {
    FINISHED,
    STARTED,
    DRAFT,
    IN_PROGRESS
}

type Step {
    id: ID!
    title: String!
    processSteps: [ProcessSteps]
}

type Process {
    id: ID!
    name: String!
    description: String!
    processSteps: [ProcessSteps]

}

type ProcessSteps {
    id: ID!
    process: Process!
    status: Status!
    step: Step!
    order: Int!
}

type Privilege {
    id: ID!
    name: String
}

type Study {
    id: ID!
    institution: Institution!
    domainStudy: Domain
    degree: String
    certification: Certification
    description: String
    startDate: Date!
    endDate: Date
    userProfile: UserProfile!
}

input StudyInput {
    id: ID
    institution: ID!
    domainStudy: ID
    degree: String
    certification: ID
    description: String
    startDate: Date!
    endDate: Date
    userProfileSlugUrl: String!
}

type Recruiter {
    id: ID!
    user: User!
}

type Photography {
    id: ID!
    name: String!
    path: String!
    userProfile: UserProfile
}

type Role {
    id: ID!
    name: String!
    privileges: [Privilege]
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    birthDate: Date
    email: String!
    username: String!
    roles: [Role]
    isEmailConfirmed: Boolean
}

type UserProfile {
    id: ID!
    user: User!
    photography: String
    coverPhotography: String
    description: String
    city: City
    profileSlugUrl: String!
    profileTitle: String!
    experiences: [Experience]
    studies: [Study]
}

input UserProfileInput {
    id: ID!
    firstName: String!
    lastName: String!
    description: String!
    city: String!
    profileTitle: String!
    profileSlugUrl: String!
}

enum FieldType {
    BOOLEAN
    CHAR
    DATE
    DATETIME
    DOUBLE
    INTEGER
    LONG
    STRING
}

enum Operator {
    EQUAL
    NOT_EQUAL
    LIKE
    IN
    BETWEEN
    LESS_THAN
    LESS_THAN_EQUAL
    GREATER_THAN
    GREATER_THAN_EQUAL
}

input FiltersInput {
    key: String!
    operator: Operator!
    fieldType: FieldType!
    value: String!
}

enum SortDirection {
    ASC,
    DESC
}

input SortsInput {
    key: String!
    direction: SortDirection!
}

input SearchQueryInput {
    filters: [FiltersInput]
    sorts: [SortsInput]
    page: Int
    size: Int
}

type Query {
    healthCheck: String
    getAllJobCategories: [JobCategory]
    getAllUsers: [User]
    getAllJobs: [Job]
    getAllOrganizations: [Organization]
    getOrganizationById(organizationId: ID!): Organization
    getAllJobListings(searchQuery: SearchQueryInput): JobListingPage
    getRelatedJobListings(jobName: String!): [JobListing]
    getAllProcesses: [Process]
    getAllSteps: [Step]
    getStepsByProcess(processId: Int!): [Step]
    getAllActivitySectors: [ActivitySector]
    getCurrentUserProfile: UserProfile
    getUserProfile(profileSlugUrl: String): UserProfile
    getCountriesCities: [Country]
    getAllInstitutions: [Institution]
    getAllDomains: [Domain]
    getAllCertifications: [Certification]
    getApplicationForJobListing(JobListingId: ID!): Application
}

type Mutation {
    healthCheckPost: String
    publishJob(JobInput: JobInput!): Job
    publishJobListing(JobListingInput: JobListingInput!): JobListing
    updateUserProfile(UserProfileInput: UserProfileInput!): UserProfile
    addUserProfileExperience(ExperienceInput: ExperienceInput!): UserProfile
    updateUserProfileExperience(ExperienceInput: ExperienceInput!): UserProfile
    addUserProfileStudy(StudyInput: StudyInput!): UserProfile
    updateUserProfileStudy(StudyInput: StudyInput!): UserProfile
    addInstitution(InstitutionInput: InstitutionInput!): Institution
    addDomain(DomainInput: DomainInput!): Domain
    addCertification(CertificationInput: CertificationInput!): Certification
    addJobCategory(JobCategoryInput: JobCategoryInput!): JobCategory
    applyToJobListing(ApplicationInput: ApplicationInput!): Application
}