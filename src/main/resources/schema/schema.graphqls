# The root query of the application
scalar Date
scalar DateTime

type ActivitySector {
    id: ID!
    name: String!
}

type Application {
    id: ID!
    dateOfApplication: Date!
}

enum ContractType {
    FULL_TIME,
    PART_TIME,
    INTERNSHIP,
    FREE_PROFESSIONAL,
    TEMPORARY_EMPLOYEE,
    PUPIL,
    SEASONAL
}

enum Domain {
    PSYCHOLOGY,
    COMPUTER_SCIENCE,
    ARTS,
    MATHEMATICS
}

type Experience {
    id: ID!
    title: String!
    contractType: ContractType!
    organization: Organization
    location: String
    startDate: Date!
    endDate: Date
    activitySector: ActivitySector!
    description: String!
    userProfile: UserProfile!
}

type JobCategory {
    id: ID!
    name: String!
}

type Job {
    id: ID!
    name: String!
    description: String!
    jobListings: [JobListing]
}

input JobInput {
    name: String!
    description: String!
}

input JobListingInput {
    title: String!
    description: String!
    availableFrom: Date!
    availableTo: Date!
    location: String!
    jobId: ID!
    numberOfVacancies: Int!
    contractType: ContractType!
    organizationId: ID!
    categoryId: ID!
}

type JobListing {
    id: ID!
    title: String!
    description: String!
    availableFrom: Date!
    availableTo: Date!
    isActive: Boolean
    location: String!
    numberOfVacancies: Int!
    job: Job!
    contractType: ContractType!
    organization: Organization!
    category: JobCategory
    applications: [Application]
}

type Organization {
    id: ID!
    name: String!
    industry: String!
    location: String!
    jobs: [JobListing]
    photography: String
}

enum Status {
    FINISHED,
    STARTED,
    DRAFT,
    IN_PROGRESS
}

type Step {
    id: ID!
    title: String!
    processSteps: [ProcessSteps]
}

type Process {
    id: ID!
    name: String!
    description: String!
    processSteps: [ProcessSteps]

}

type ProcessSteps {
    id: ID!
    process: Process!
    status: Status!
    step: Step!
    order: Int!
}

type Privilege {
    id: ID!
    name: String
}

type ProfileStudies {
    id: ID!
    study: Study
    profile: UserProfile
    startDate: Date!
    endDate: Date
    diploma: String
    description: String
    domain: Domain
}

type Study {
    id: ID!
    name: String!
    description: String
    profiles: [ProfileStudies]
}

type Recruiter {
    id: ID!
    user: User!
}

type Role {
    id: ID!
    name: String!
    privileges: [Privilege]
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    birthDate: Date
    email: String!
    username: String!
    roles: [Role]
    isEmailConfirmed: Boolean
}

type UserProfile {
    id: ID!
    user: User!
    photography: String
    description: String
    profileSlugUrl: String!
    profileTitle: String!
    experiences: [Experience]
}

type Query {
    healthCheck: String
    getAllJobCategories: [JobCategory]
    getAllUsers: [User]
    getAllJobs: [Job]
    getAllOrganizations: [Organization]
    getAllJobListings: [JobListing]
    getAllProcesses: [Process]
    getAllSteps: [Step]
    getStepsByProcess(processId: Int!): [Step]
    getAllActivitySectors: [ActivitySector]
}

type Mutation {
    healthCheckPost: String
    publishJob(JobInput: JobInput): Job
    publishJobListing(JobListingInput: JobListingInput): JobListing
}