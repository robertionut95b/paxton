# noinspection GraphQLUnresolvedReference
# The root query of the application
scalar Date
scalar DateTime
scalar Url
scalar Long
scalar Upload

directive @constraint(
    # String constraints
    minLength: Int
    maxLength: Int
    startsWith: String
    endsWith: String
    contains: String
    notContains: String
    pattern: String
    format: String
    # Number constraints
    min: Float
    max: Float
    exclusiveMin: Float
    exclusiveMax: Float
    multipleOf: Float
    uniqueTypeName: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

interface BaseEntity {
    id: Long!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

interface FileEntity {
    id: Long!
    urlId: String!
    name: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type ActivitySector implements BaseEntity {
    id: Long!
    name: String!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

enum ApplicationStatus {
    IN_PROGRESS,
    FINISHED,
    CANCELED
}

type Application implements BaseEntity {
    id: Long!
    dateOfApplication: DateTime!
    applicantProfile: UserProfile!
    candidate: Candidate!
    jobListing: JobListing!
    status: ApplicationStatus!
    currentStep: ProcessSteps!
    processSteps: [ApplicationProcessSteps]
    applicationDocuments: [ApplicationDocument]
    chat: ChatResponse!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type ApplicationsCountByStep {
    applicationsCount: Int!
    stepTitle: String!
}

type ApplicationDocument implements BaseEntity {
    id: Long!
    document: Document!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input ApplicationInput {
    id: Long
    userId: Long!
    applicantProfileId: Long!
    jobListingId: Long!
    status: ApplicationStatus
    processSteps: [ApplicationProcessStepsInput]
    dateOfApplication: DateTime
}

type ApplicationPage {
    list: [Application],
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

input ApplicationProcessStepsInput {
    id: Long
    processStepId: Long!
    applicationId: Long!
    registeredAt: DateTime
}

type ApplicationProcessSteps implements BaseEntity {
    id: Long!
    processStep: ProcessSteps!
    application: Application!
    registeredAt: DateTime!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type Candidate implements BaseEntity {
    id: Long!
    user: User!
    applications: [Application]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type CandidatePage {
    list: [Candidate],
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

input ChatInput {
    id: Long
    users: [Long]!
    messages: [MessageInput]
    chatType: ChatType
}

type ChatResponse implements BaseEntity {
    id: Long!
    title: String
    chatType: ChatType
    unreadMessagesCount: Int!
    users: [User]
    latestMessage: Message
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type ChatLiveUpdate {
    id: Long!
    urlId: String!
    users: [User]
    title: String
    latestMessage: Message
    unreadMessagesCount: Int!
}

type ChatPage {
    list: [ChatResponse]
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

enum ChatType {
    PRIVATE_CHAT,
    GROUP_PRIVATE_CHAT,
    APPLICATION_CHAT
}

enum ContractType {
    FULL_TIME,
    PART_TIME,
    INTERNSHIP,
    FREE_PROFESSIONAL,
    TEMPORARY_EMPLOYEE,
    PUPIL,
    SEASONAL
}

type City implements BaseEntity {
    id: Long!
    name: String!
    country: Country!
    longitude: Float
    latitude: Float
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type Certification implements BaseEntity {
    id: Long!
    name: String!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input CertificationInput {
    name: String!
}

type Country implements BaseEntity {
    id: Long!
    code: String!
    name: String!
    cities: [City]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

enum ConnectionStatus {
    REQUESTED
    ACCEPTED
    BLOCKED
    DECLINED
}

type Connection implements BaseEntity {
    id: Long!
    requester: User!
    addressed: User!
    connectionStatus: ConnectionStatus!
    lastModified: DateTime!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type UserConnection implements BaseEntity {
    id: Long!
    user: User!
    connectedAt: DateTime!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type ConnectionPage {
    list: [Connection],
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

type UserConnectionPage {
    list: [UserConnection],
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

input ConnectionCreateInput {
    id: Long
    requesterId: Long!
    addressedId: Long!
    connectionStatus: ConnectionStatus!
}

input ConnectionUpdateInput {
    id: Long!
    requesterId: Long!
    addressedId: Long!
    connectionStatus: ConnectionStatus!
}

type Document implements BaseEntity {
    id: Long!
    name: String!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type Domain implements BaseEntity {
    id: Long!
    name: String!
    studies: [Study]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input DomainInput {
    name: String!
}

type Institution implements BaseEntity {
    id: Long!
    name: String!
    description: String
    photography: String
    studies: [Study]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input InstitutionInput {
    name: String!
    description: String
    photography: String
}

type Experience implements BaseEntity {
    id: Long!
    title: String!
    contractType: ContractType!
    organization: Organization
    city: City
    startDate: Date!
    endDate: Date
    activitySector: ActivitySector!
    description: String!
    userProfile: UserProfile!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input ExperienceInput {
    id: Long
    title: String!
    contractType: ContractType!
    organizationId: Long!
    city: String
    startDate: Date!
    endDate: Date
    activitySectorId: Long!
    description: String!
    userProfileSlugUrl: String!
}

type JobCategory implements BaseEntity {
    id: Long!
    name: String!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input JobCategoryInput {
    id: Long
    name: String!
}

type Job implements BaseEntity {
    id: Long!
    name: String!
    description: String!
    jobListings: [JobListing]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type JobPage {
    list: [Job],
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

input JobInput {
    id: Long
    name: String! @constraint(minLength: 5)
    description: String! @constraint(minLength: 5, maxLength: 250)
}

input JobListingInput {
    id: Long
    title: String! @constraint(minLength: 5)
    description: String! @constraint(minLength: 10, maxLength: 8000)
    formattedDescription: String! @constraint(minLength: 10)
    availableFrom: Date!
    availableTo: Date!
    location: String! @constraint(minLength: 3)
    jobId: Long! @constraint(minLength: 1)
    numberOfVacancies: Int! @constraint(minLength: 1)
    contractType: ContractType!
    organizationId: Long! @constraint(minLength: 1)
    categoryId: Long! @constraint(minLength: 1)
    recruiterId: Long! @constraint(minLength: 1)
    workType: WorkType!
}

type JobListing implements BaseEntity {
    id: Long!
    title: String!
    description: String!
    formattedDescription: String!
    availableFrom: Date!
    availableTo: Date!
    isActive: Boolean
    city: City!
    numberOfVacancies: Int!
    job: Job!
    contractType: ContractType!
    organization: Organization!
    category: JobCategory
    applications: [Application]
    workType: WorkType!
    recruiter: Recruiter
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type JobListingPage {
    list: [JobListing],
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

type Message implements BaseEntity {
    id: Long!
    content: String
    fileContents: [MessageFile]
    sender: User!
    deliveredAt: DateTime!
    chat: ChatResponse
    seenBy: [MessageSeenBy]
    seenAt: DateTime
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type MessageFile implements BaseEntity {
    id: Long!
    urlId: String!
    name: String!
    path: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input MessageInput {
    id: Long
    content: String!
    senderUserId: Long!
    chatId: Long!
}

input MessageFileInput {
    id: Long
    senderUserId: Long!
    chatId: Long!
}

type MessagePage {
    list: [Message],
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

input MessageSeenInput {
    id: Long
    userId: Long
}

type MessageSeenBy implements BaseEntity {
    id: Long!
    user: User!
    message: Message!
    seenAt: DateTime!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

enum OrganizationSize {
    BETWEEN_1_5
    BETWEEN_5_30
    BETWEEN_30_100
    BETWEEN_100_500
    BETWEEN_500_1000
    BETWEEN_1000_5000
    BETWEEN_5000_10000
    OVER_10000
}

type Organization implements BaseEntity {
    id: Long!
    name: String!
    slugName: String!
    slogan: String!
    description: String!
    headQuarters: City!
    jobs: [JobListing]
    photography: String
    recruiters: [Recruiter]
    recruitmentProcess: Process!
    webSite: Url
    activitySector: ActivitySector!
    foundedAt: Date!
    companySize: OrganizationSize!
    locations: [City]
    specializations: [Specialization]
    affiliates: [Organization]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input OrganizationInput {
    id: Long
    name: String! @constraint(minLength: 3)
    slogan: String! @constraint(minLength: 5, maxLength: 100)
    description: String! @constraint(minLength: 5)
    activitySectorId: Long! @constraint(minLength: 1)
    headQuartersId: Long! @constraint(minLength: 1)
    photography: String
    webSite: Url
    foundedAt: Date!
    companySize: OrganizationSize
    locations: [Long]
    specializations: [Specialization]
}

type Process implements BaseEntity {
    id: Long!
    name: String!
    description: String!
    processSteps: [ProcessSteps]
    organizations: [Organization]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input ProcessInput {
    id: Long
    name: String!
    description: String!
    processSteps: [ProcessStepsInput]
    organizationId: Long!
}

input ProcessInputCreate {
    id: Long
    name: String!
    description: String!
    processSteps: [ProcessStepsInputCreate]
    organizationId: Long!
}

type ProcessPage {
    list: [Process]
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

type ProcessSteps implements BaseEntity {
    id: Long!
    process: Process!
    status: Status!
    step: Step!
    order: Int!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input ProcessStepsInput {
    id: Long
    processId: Long!
    status: Status!
    stepId: Long!
    order: Int!
}

input ProcessStepsInputCreate {
    id: Long
    status: Status!
    stepId: Long!
    order: Int!
}

type Privilege implements BaseEntity {
    id: Long!
    name: String
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

enum Status {
    ACTIVE,
    REMOVED,
    DRAFT
}

enum Specialization {
    Banking,
    Retail_banking,
    Corporate_and_Investment_Banking,
    Private_Banking,
    Financial_services,
    Insurance,
    Securities_Services,
    Mobility,
    Credit,
    Entrepreneurs,
    Intrapreneurs,
    Commercial_Banking,
    Investment_Banking,
    Wealth_Management,
    Credit_Cards,
    Capital_Markets,
    Equity_and_Fixed_Income_Research,
    Consumer_Lending,
    Cash_Management,
    Transaction_Services,
    Offshore_Bonds,
    Investment_Funds,
    Equities_and_Brokerage,
    Exchange_Traded_Funds,
    Multi_Asset_Funds,
    Technology_Innovation,
    AI,
    Machine_Learning,
    Internet_of_Things,
    Blockchain,
    Virtual_Reality, Augmented_Reality,
    Software_Product_Design,
    Software_Development,
    Digital_Transformation,
    Financial_Software_Development,
    Insurtech_Development,
    Fintech_Development,
    Information_Technology_and_Services,
    IT_and_Software,
    Technical_Consulting,
    Project_Management,
    Information_Services,
    Engineering,
    Automotive,
    Industrial_Automation
}

type Step implements BaseEntity {
    id: Long!
    title: String!
    description: String!
    processSteps: [ProcessSteps]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input StepInput {
    title: String! @constraint(minLength: 2, maxLength: 15)
    description: String! @constraint(minLength: 3, maxLength: 150)
}

type Study implements BaseEntity {
    id: Long!
    institution: Institution!
    domainStudy: Domain
    degree: String
    certification: Certification
    description: String
    startDate: Date!
    endDate: Date
    userProfile: UserProfile!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input StudyInput {
    id: Long
    institution: Long!
    domainStudy: Long
    degree: String
    certification: Long
    description: String
    startDate: Date!
    endDate: Date
    userProfileSlugUrl: String!
}

type Photography implements BaseEntity {
    id: Long!
    name: String!
    path: String!
    userProfile: UserProfile
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type Recruiter implements BaseEntity {
    id: Long!
    user: User!
    organization: Organization!
    isActive: Boolean!
    lastActive: DateTime
    registeredAt: DateTime!
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input RecruiterInput {
    id: Long!
    organizationId: Long
    isActive: Boolean
    lastActive: DateTime
}

type RecruiterPage {
    list: [Recruiter]
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

type Role implements BaseEntity {
    id: Long!
    name: String!
    privileges: [Privilege]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type User implements BaseEntity {
    id: Long!
    urlId: String!
    firstName: String!
    lastName: String!
    displayName: String!
    birthDate: Date
    email: String!
    username: String!
    roles: [Role]
    isEmailConfirmed: Boolean!
    userProfile: UserProfile!
    createdAt: DateTime!
    createdBy: String!
    modifiedAt: DateTime!
    modifiedBy: String!
}

type UserPage {
    list: [User]
    page: Int!
    totalPages: Int!
    totalElements: Int!
}

type UserProfileAvatarImage implements FileEntity {
    id: Long!
    urlId: String!
    name: String!
    url: String!
    userProfile: UserProfile!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type UserProfileBannerImage implements FileEntity {
    id: Long!
    urlId: String!
    name: String!
    url: String!
    userProfile: UserProfile!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

type UserProfile implements BaseEntity {
    id: Long!
    user: User!
    userProfileAvatarImage: UserProfileAvatarImage
    userProfileBannerImage: UserProfileBannerImage
    description: String
    city: City
    profileSlugUrl: String!
    profileTitle: String!
    experiences: [Experience]
    studies: [Study]
    urlId: String!
    createdAt: DateTime!
    modifiedAt: DateTime!
    createdBy: String!
    modifiedBy: String!
}

input UserProfileInput {
    id: Long!
    firstName: String!
    lastName: String!
    description: String!
    city: String!
    profileTitle: String!
    profileSlugUrl: String!
}

enum WorkType {
    REMOTE
    ON_SITE
    HYBRID
}

enum FieldType {
    BOOLEAN
    CHAR
    DATE
    DATETIME
    DOUBLE
    INTEGER
    LONG
    STRING
    ENUM
}

enum Operator {
    EQUAL
    NOT_EQUAL
    LIKE
    IN
    NOT_IN
    BETWEEN
    LESS_THAN
    LESS_THAN_EQUAL
    GREATER_THAN
    GREATER_THAN_EQUAL
}

input FiltersInput {
    key: String!
    operator: Operator!
    fieldType: FieldType!
    value: String
    values: [String]
    valueTo: String
}

enum SortDirection {
    ASC,
    DESC
}

input SortsInput {
    key: String!
    direction: SortDirection!
}

input SearchQueryInput {
    filters: [FiltersInput]
    sorts: [SortsInput]
    page: Int
    size: Int
}

type Query {
    healthCheck: String
    getCurrentUser: User
    getAllJobCategories: [JobCategory]
    getAllUsers: [User]
    getAllUsersPaged(searchQuery: SearchQueryInput): UserPage
    getAllJobs: [Job]
    getJobById(jobId: Long!): Job
    getAllJobsPaginated(searchQuery: SearchQueryInput): JobPage
    getAllOrganizations: [Organization]
    getOrganizationById(organizationId: Long!): Organization
    getOrganizationBySlugName(slugName: String!): Organization
    getAllJobListings(searchQuery: SearchQueryInput): JobListingPage
    getRelatedJobListings(jobName: String!): [JobListing]
    getAllProcesses(searchQuery: SearchQueryInput): ProcessPage
    getAllSteps: [Step]
    getStepsByProcess(processId: Int!): [Step]
    getAllActivitySectors: [ActivitySector]
    getCurrentUserProfile: UserProfile
    getUserProfile(profileSlugUrl: String): UserProfile
    getCountriesCities: [Country]
    getAllInstitutions: [Institution]
    getAllDomains: [Domain]
    getAllCertifications: [Certification]
    getApplicationById(applicationId: Long!): Application
    getApplicationsForJobIdCountBySteps(jobId: Long!): [ApplicationsCountByStep]
    getMyApplicationForJobListing(JobListingId: Long!): Application
    getAllCandidates(searchQuery: SearchQueryInput): CandidatePage
    getAllCandidatesByJobListingId(JobListingId: Long!): CandidatePage
    getAllApplications(searchQuery: SearchQueryInput): ApplicationPage
    getMyApplications(userId: Long!): [Application]
    getRecruiterById(recruiterId: Long!): Recruiter
    getAllRecruitersForOrganization(organizationId: Long!): [Recruiter]
    getAllRecruitersForOrganizationBySlug(organizationSlug: String!): [Recruiter]
    findRecruitersAdvSearch(searchQuery: SearchQueryInput): RecruiterPage
    getPrivateChatById(chatId: Long!): ChatResponse
    getPrivateChatByUrlId(chatUrlId: String!): ChatResponse
    getChatAdvSearch(searchQuery: SearchQueryInput): ChatPage
    getChatWithUserId(userId: Long!): ChatResponse
    getChatsWithUsersIds(userIds: [Long]!, chatType: ChatType!): [ChatResponse]
    getMessagesPaginated(searchQuery: SearchQueryInput): MessagePage
    getNewConnectionForUser(userId: Long!, page: Int, size: Int): ConnectionPage
    getConnectionsForUser(userId: Long!, page: Int, size: Int, searchQuery: String, sortBy: SortsInput): UserConnectionPage
    getAllUserConnectionSuggestions(page: Int, size: Int): UserPage
}

type Mutation {
    healthCheckPost: String
    publishJob(JobInput: JobInput!): Job
    publishJobListing(JobListingInput: JobListingInput!): JobListing
    updateUserProfile(UserProfileInput: UserProfileInput!): UserProfile
    addUserProfileExperience(ExperienceInput: ExperienceInput!): UserProfile
    updateUserProfileExperience(ExperienceInput: ExperienceInput!): UserProfile
    addUserProfileStudy(StudyInput: StudyInput!): UserProfile
    updateUserProfileStudy(StudyInput: StudyInput!): UserProfile
    removeUserProfileStudy(studyId: Long!): UserProfile
    removeUserProfileExperience(experienceId: Long!): UserProfile
    addInstitution(InstitutionInput: InstitutionInput!): Institution
    addDomain(DomainInput: DomainInput!): Domain
    addCertification(CertificationInput: CertificationInput!): Certification
    addJobCategory(JobCategoryInput: JobCategoryInput!): JobCategory
    applyToJobListing(ApplicationInput: ApplicationInput!): Application
    createProcess(ProcessInput: ProcessInput!): Process
    updateProcess(ProcessInput: ProcessInput!): Process
    createOrUpdateOrganization(OrganizationInput: OrganizationInput!): Organization
    alterRecruitersInOrganization(RecruiterInput: [RecruiterInput]!, OrganizationId: Long!): [Recruiter]
    updateApplication(ApplicationInput: ApplicationInput!): Application
    addMessageToApplicationChat(MessageInput: MessageInput!, applicationId: Long!): Application
    addMessageToChat(MessageInput: MessageInput!): ChatResponse
    addMessageWithFileToChat(messageInput: MessageFileInput!, fileUpload: [Upload]!): ChatResponse
    createChat(ChatInput: ChatInput!): ChatResponse
    updateChat(ChatInput: ChatInput!): ChatResponse
    removeChat(chatId: Long!): ChatResponse
    markAllMessagesAsSeen(chatId: Long!, userId: Long!): ChatResponse
    updateProcessForOrganizationId(processInput: ProcessInputCreate!, organizationId: Long!): Process
    createStep(stepInput: StepInput!): Step
    createConnection(connectionCreateInput: ConnectionCreateInput!): Connection
    updateConnection(connectionRequestInput: ConnectionUpdateInput!): Connection
    removeConnection(connectionId: Long!): Connection
}

type Subscription {
    getMessagesForChatId(chatId: Long!, auth: String!): Message
    getLiveUpdatesForChats(auth: String!): ChatLiveUpdate
}